00
000 000 NOP

RP0 001 LXI 3
RP1 001 DAD

000 010 STAX_B
010 010 STAX_D
100 010 SHLD
110 010 STA 3
001 010 LDAX_B
011 010 LDAX_D
101 010 LHLD 3
111 010 LDA 3

RP0 011 INX_RP
RP1 011 DCX_RP

DDD 100 INC_R
  DDD++;
  DDD = DDD & 0xff;
DDD 101 DCR_R
  DDD--;
  DDD = DDD & 0xff;
DDD 110 MVI_R 2
  DDD = db;

000 111 RLC
001 111 RRC
010 111 RAL
011 111 RAR
100 111 DAD
101 111 CMA
110 111 STC
111 111 CMC

01
110 SSS MOV_W 3
  addr = SSS;
DDD 110 MOV_R 3
  DDD = HL;
DDD SSS MOV
  DDD = SSS;
110 110 HALT
  return;

10
000 RRR ADD_R
001 RRR ADC_R
010 RRR SUB_R
011 RRR SBB_R
100 RRR ANA_R
101 RRR XRA_R
110 RRR ORA_R
111 RRR CMP_R

11
CCC 000 RET_C

RP0 001 POP_RP

001 001 RET 1 0
  this.pc = this.pop();
011 001 NOT_USED
101 001 PCHL 3 0
  this.pc = HL;
111 001 SPHL

CCC 010 JMP_C 3

000 011 JMP
001 011 NOT_USED
010 011 OUT
011 011 IN
100 011 XTHL
101 011 XCHG
110 011 DI
111 011 EI

CCC 100 CALL_C 3 0
  this.pc = addr;

RP0 101 PUSH_RP

001 101 CALL
011 101 NOT_USED
101 101 NOT_USED
111 101 NOT_USED

000 110 ADI 2
010 110 SUI 2
100 110 ANI 2
110 110 ORI 2

PPP 111 RST_P
