00 000 000 NOP
00 RP0 001 LXI 3
  # LXI RP, arg16
  this.loadImmU16(RP_NAME, arg16)
00 RP1 001 DAD
  this.dad(RP_NAME);
00 000 010 STAX_B
  # STAX bc
  RP_MEM = this.a;
00 010 010 STAX_D
  # STAX de
  RP_MEM = this.a;
00 100 010 SHLD 3
  # SHLD addr
  this.storeU16(arg16, this.hl());
00 110 010 STA 3
  # STA addr
  mref = this.a;
00 001 010 LDAX_BC
  # LDAX RP
  this.a = RP_MEM;
00 011 010 LDAX_DE
  # LDAX RP
  this.a = RP_MEM;
00 101 010 LHLD 3
  # LHLD addr
  this.loadU16('hl', arg16);
00 111 010 LDA 3
  # LDA addr
  this.a = mref;
00 RP0 011 INX
  # INX RP
  this.loadImmU16(RP_NAME, (RP_VAL + 1) & 0xffff);
00 RP1 011 DCX
  # DCX RP
  this.loadImmU16(RP_NAME, (RP_VAL - 1) & 0xffff);
00 DDD 100 INR
  # INR DDD
  DDD = this.inr(DDD);
00 DDD 101 DCR
  # DCR DDD
  DDD = this.dcr(DDD);
00 DDD 110 MVI 2
  # MVI DDD, db
  DDD = db;
00 000 111 RLC
00 001 111 RRC
00 010 111 RAL
00 011 111 RAR
00 100 111 DAA
00 101 111 CMA
  this.a = ~this.a;
00 110 111 STC
  this.stc();
00 111 111 CMC
  this.cmc();

01 110 110 HALT 1
01 110 SSS MOV_W 3
  # MOV [HL], SSS
  HL = SSS;
01 DDD 110 MOV_R 3
  # MOV DDD, [HL]
  DDD = HL;
01 DDD SSS MOV
  # MOV DDD, SSS
  DDD = SSS;
01 110 110 HALT
  return;

10 000 RRR ADD_R
10 001 RRR ADC_R
10 010 RRR SUB_R
10 011 RRR SBB_R
10 100 RRR ANA_R
10 101 RRR XRA_R
10 110 RRR ORA_R
10 111 RRR CMP_R

11 CCC 000 RET_C

11 RP0 001 POP_RP

11 001 001 RET 1 0
  this.pc = this.pop();
11 011 001 NOT_USED
11 101 001 PCHL 3 0
  this.pc = HL;
11 111 001 SPHL

11 CCC 010 JMP_C 3

11 000 011 JMP
11 001 011 NOT_USED
11 010 011 OUT
11 011 011 IN
11 100 011 XTHL
11 101 011 XCHG
11 110 011 DI
11 111 011 EI

11 CCC 100 CALL_C 3 0
  this.pc = arg16;

11 RP0 101 PUSH_RP

11 001 101 CALL
11 011 101 NOT_USED
11 101 101 NOT_USED
11 111 101 NOT_USED

11 000 110 ADI 2
11 010 110 SUI 2
11 100 110 ANI 2
11 110 110 ORI 2

11 PPP 111 RST_P

xx xxx xxx UNK
